[{"path":"counter/counter.component.html","content":"<div>Count: {{ count$ | async }}</div>\n\n<button class=\"dg-btn dg-btn-primary dg-btn-sm\" (click)=\"increase()\">+</button>\n<button class=\"dg-btn dg-btn-primary dg-btn-sm\" (click)=\"decrease()\">-</button>\n"},{"path":"counter/counter.component.scss","content":":host {\n    button + button {\n        margin-left: 10px;\n    }\n}\n"},{"path":"counter/counter.component.ts","content":"import { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { CounterStore } from './counter.store';\n\n@Component({\n    selector: 'thy-store-counter-example',\n    templateUrl: './counter.component.html',\n    styleUrls: ['./counter.component.scss']\n})\nexport class ThyStoreCounterExampleComponent implements OnInit {\n    count$: Observable<number> = this.counterStore.select(CounterStore.countSelector);\n\n    constructor(public counterStore: CounterStore) {}\n\n    // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\n    ngOnInit(): void {}\n\n    increase() {\n        this.counterStore.increase();\n    }\n\n    decrease() {\n        this.counterStore.decrease();\n    }\n}\n"},{"path":"counter/counter.store.ts","content":"import { Injectable } from '@angular/core';\nimport { Action, Store } from '@tethys/store';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\ninterface CounterState {\n    count: number;\n}\n\n@Injectable()\nexport class CounterStore extends Store<CounterState> {\n    static countSelector(state: CounterState) {\n        return state.count;\n    }\n\n    constructor() {\n        super({\n            count: 0\n        });\n    }\n\n    @Action()\n    increase() {\n        return of(true).pipe(\n            tap(() => {\n                this.setState({ count: this.snapshot.count + 1 });\n            })\n        );\n    }\n\n    @Action()\n    decrease() {\n        return of(true).pipe(\n            tap(() => {\n                this.setState((state) => {\n                    return {\n                        count: state.count - 1\n                    };\n                });\n            })\n        );\n    }\n}\n"},{"path":"todos/todos.component.html","content":"<section class=\"todoapp\" *ngIf=\"todos$ | async as todos\">\n  <header class=\"header\">\n    <h1>todos</h1>\n    <input class=\"new-todo\" placeholder=\"What needs to be done?\" autofocus=\"\" [(ngModel)]=\"newTodoText\" (keyup.enter)=\"addTodo()\" />\n  </header>\n  <section class=\"main\" *ngIf=\"todos && todos.length > 0\">\n    <input\n      id=\"toggle-all\"\n      class=\"toggle-all\"\n      type=\"checkbox\"\n      *ngIf=\"todos.length\"\n      #toggleAll\n      [checked]=\"todosStore.allCompleted()\"\n      (click)=\"todosStore.setAllTo(toggleAll.checked)\"\n    />\n    <ul class=\"todo-list\">\n      <li *ngFor=\"let todo of todos; trackBy: todosStore.trackByFn\" [class.completed]=\"todo.completed\" [class.editing]=\"todo.editing\">\n        <div class=\"view\">\n          <input class=\"toggle\" type=\"checkbox\" (click)=\"toggleCompletion(todo)\" [checked]=\"todo.completed\" />\n          <label (dblclick)=\"editTodo(todo)\">{{ todo.title }}</label>\n          <button class=\"destroy\" (click)=\"remove(todo)\"></button>\n        </div>\n        <input\n          class=\"edit\"\n          *ngIf=\"todo.editing\"\n          [value]=\"todo.title\"\n          #editor\n          (blur)=\"stopEditing(todo, editor.value)\"\n          (keyup.enter)=\"update(todo, editor.value)\"\n          (keyup.escape)=\"cancelEditingTodo(todo)\"\n        />\n      </li>\n    </ul>\n  </section>\n  <footer class=\"footer\" *ngIf=\"todos.length > 0\">\n    <span class=\"todo-count\"\n      ><strong>{{ todosStore.getRemaining().length }}</strong> {{ todosStore.getRemaining().length === 1 ? 'item' : 'items' }} left</span\n    >\n    <button class=\"clear-completed\" *ngIf=\"todosStore.getCompleted().length > 0\" (click)=\"removeCompleted()\">Clear completed</button>\n  </footer>\n</section>\n"},{"path":"todos/todos.component.scss","content":"button {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    background: none;\n    font-size: 100%;\n    vertical-align: baseline;\n    font-family: inherit;\n    font-weight: inherit;\n    color: inherit;\n    -webkit-appearance: none;\n    appearance: none;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.hidden {\n    display: none;\n}\n\n.todoapp {\n    background: #fff;\n    margin: 130px 0 40px 0;\n    position: relative;\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);\n}\n\n.todoapp input::-webkit-input-placeholder {\n    font-style: italic;\n    font-weight: 400;\n    color: rgba(0, 0, 0, 0.4);\n}\n\n.todoapp input::-moz-placeholder {\n    font-style: italic;\n    font-weight: 400;\n    color: rgba(0, 0, 0, 0.4);\n}\n\n.todoapp input::input-placeholder {\n    font-style: italic;\n    font-weight: 400;\n    color: rgba(0, 0, 0, 0.4);\n}\n\n.todoapp h1 {\n    position: absolute;\n    top: -140px;\n    width: 100%;\n    font-size: 80px;\n    font-weight: 200;\n    text-align: center;\n    color: #b83f45;\n    -webkit-text-rendering: optimizeLegibility;\n    -moz-text-rendering: optimizeLegibility;\n    text-rendering: optimizeLegibility;\n}\n\n.new-todo,\n.edit {\n    position: relative;\n    margin: 0;\n    width: 100%;\n    font-size: 24px;\n    font-family: inherit;\n    font-weight: inherit;\n    line-height: 1.4em;\n    color: inherit;\n    padding: 6px;\n    border: 1px solid #999;\n    box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.new-todo {\n    padding: 16px 16px 16px 60px;\n    height: 65px;\n    border: none;\n    background: rgba(0, 0, 0, 0.003);\n    box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0.03);\n}\n\n.main {\n    position: relative;\n    z-index: 2;\n    border-top: 1px solid #e6e6e6;\n}\n\n.toggle-all {\n    width: 1px;\n    height: 1px;\n    border: none; /* Mobile Safari */\n    opacity: 0;\n    position: absolute;\n    right: 100%;\n    bottom: 100%;\n}\n\n.toggle-all + label {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 45px;\n    height: 65px;\n    font-size: 0;\n    position: absolute;\n    top: -65px;\n    left: -0;\n}\n\n.toggle-all + label:before {\n    content: '❯';\n    display: inline-block;\n    font-size: 22px;\n    color: #949494;\n    padding: 10px 27px 10px 27px;\n    -webkit-transform: rotate(90deg);\n    transform: rotate(90deg);\n}\n\n.toggle-all:checked + label:before {\n    color: #484848;\n}\n\n.todo-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.todo-list li {\n    position: relative;\n    font-size: 24px;\n    border-bottom: 1px solid #ededed;\n}\n\n.todo-list li:last-child {\n    border-bottom: none;\n}\n\n.todo-list li.editing {\n    border-bottom: none;\n    padding: 0;\n}\n\n.todo-list li.editing .edit {\n    display: block;\n    width: calc(100% - 43px);\n    padding: 12px 16px;\n    margin: 0 0 0 43px;\n}\n\n.todo-list li.editing .view {\n    display: none;\n}\n\n.todo-list li .toggle {\n    text-align: center;\n    width: 40px;\n    /* auto, since non-WebKit browsers doesn't support input styling */\n    height: auto;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    margin: auto 0;\n    border: none; /* Mobile Safari */\n    -webkit-appearance: none;\n    appearance: none;\n}\n\n.todo-list li .toggle {\n    opacity: 0;\n}\n\n.todo-list li .toggle + label {\n    /*\n\t\tFirefox requires `#` to be escaped - https://bugzilla.mozilla.org/show_bug.cgi?id=922433\n\t\tIE and Edge requires *everything* to be escaped to render, so we do that instead of just the `#` - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7157459/\n\t*/\n    background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23949494%22%20stroke-width%3D%223%22/%3E%3C/svg%3E');\n    background-repeat: no-repeat;\n    background-position: center left;\n}\n\n.todo-list li .toggle:checked + label {\n    background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%2359A193%22%20stroke-width%3D%223%22%2F%3E%3Cpath%20fill%3D%22%233EA390%22%20d%3D%22M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z%22%2F%3E%3C%2Fsvg%3E');\n}\n\n.todo-list li label {\n    word-break: break-all;\n    padding: 15px 15px 15px 60px;\n    display: block;\n    line-height: 1.2;\n    transition: color 0.4s;\n    font-weight: 400;\n    color: #484848;\n}\n\n.todo-list li.completed label {\n    color: #949494;\n    text-decoration: line-through;\n}\n\n.todo-list li .destroy {\n    display: none;\n    position: absolute;\n    top: 0;\n    right: 10px;\n    bottom: 0;\n    width: 40px;\n    height: 40px;\n    margin: auto 0;\n    font-size: 30px;\n    color: #949494;\n    transition: color 0.2s ease-out;\n}\n\n.todo-list li .destroy:hover,\n.todo-list li .destroy:focus {\n    color: #c18585;\n}\n\n.todo-list li .destroy:after {\n    content: '×';\n    display: block;\n    height: 100%;\n    line-height: 1.1;\n}\n\n.todo-list li:hover .destroy {\n    display: block;\n}\n\n.todo-list li .edit {\n    display: none;\n}\n\n.todo-list li.editing:last-child {\n    margin-bottom: -1px;\n}\n\n.footer {\n    padding: 10px 15px;\n    height: 20px;\n    text-align: center;\n    font-size: 15px;\n    border-top: 1px solid #e6e6e6;\n}\n\n.footer:before {\n    content: '';\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 50px;\n    overflow: hidden;\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 8px 0 -3px #f6f6f6, 0 9px 1px -3px rgba(0, 0, 0, 0.2), 0 16px 0 -6px #f6f6f6,\n        0 17px 2px -6px rgba(0, 0, 0, 0.2);\n}\n\n.todo-count {\n    float: left;\n    text-align: left;\n}\n\n.todo-count strong {\n    font-weight: 300;\n}\n\n.filters {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    position: absolute;\n    right: 0;\n    left: 0;\n}\n\n.filters li {\n    display: inline;\n}\n\n.filters li a {\n    color: inherit;\n    margin: 3px;\n    padding: 3px 7px;\n    text-decoration: none;\n    border: 1px solid transparent;\n    border-radius: 3px;\n}\n\n.filters li a:hover {\n    border-color: #db7676;\n}\n\n.filters li a.selected {\n    border-color: #ce4646;\n}\n\n.clear-completed,\nhtml .clear-completed:active {\n    float: right;\n    position: relative;\n    line-height: 19px;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.clear-completed:hover {\n    text-decoration: underline;\n}\n\n.info {\n    margin: 65px auto 0;\n    color: #4d4d4d;\n    font-size: 11px;\n    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);\n    text-align: center;\n}\n\n.info p {\n    line-height: 1;\n}\n\n.info a {\n    color: inherit;\n    text-decoration: none;\n    font-weight: 400;\n}\n\n.info a:hover {\n    text-decoration: underline;\n}\n\n/*\n\tHack to remove background from Mobile Safari.\n\tCan't use it globally since it destroys checkboxes in Firefox\n*/\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n    .toggle-all,\n    .todo-list li .toggle {\n        background: none;\n    }\n\n    .todo-list li .toggle {\n        height: 40px;\n    }\n}\n\n@media (max-width: 430px) {\n    .footer {\n        height: 50px;\n    }\n\n    .filters {\n        bottom: 10px;\n    }\n}\n\n:focus,\n.toggle:focus + label,\n.toggle-all:focus + label {\n    box-shadow: 0 0 2px 2px #cf7d7d;\n    outline: 0;\n}\n"},{"path":"todos/todos.component.ts","content":"import { Component, OnInit } from '@angular/core';\nimport { Todo, TodosStore } from './todos.store';\n\n@Component({\n    selector: 'thy-store-todos-example',\n    templateUrl: './todos.component.html',\n    styleUrls: ['./todos.component.scss']\n})\nexport class ThyStoreTodosExampleComponent implements OnInit {\n    todos$ = this.todosStore.select(TodosStore.todosSelector);\n\n    newTodoText!: string;\n\n    constructor(public todosStore: TodosStore) {}\n\n    ngOnInit(): void {\n        this.todosStore.fetchTodos();\n    }\n\n    addTodo() {\n        this.todosStore.addTodo(this.newTodoText).subscribe(() => {\n            this.newTodoText = '';\n        });\n    }\n\n    toggleCompletion(todo: Todo) {\n        this.todosStore.toggleCompletion(todo);\n    }\n\n    editTodo(todo: Todo) {\n        todo.editing = true;\n    }\n\n    remove(todo: Todo) {\n        this.todosStore.removeTodo(todo);\n    }\n\n    update(todo: Todo, newTitle: string) {\n        this.todosStore.updateTodo(todo, newTitle);\n    }\n\n    stopEditing(todo: Todo, editedTitle: string) {\n        todo.title = editedTitle;\n        todo.editing = false;\n    }\n\n    cancelEditing(todo: Todo) {\n        todo.editing = false;\n    }\n\n    removeCompleted() {\n        this.todosStore.removeCompleted();\n    }\n}\n"},{"path":"todos/todos.store.ts","content":"import { Injectable } from '@angular/core';\nimport { Action, EntityState, EntityStore } from '@tethys/store';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport interface Todo {\n    id: number;\n    title: string;\n    editing?: boolean;\n    completed?: boolean;\n}\n\ninterface TodosState extends EntityState<Todo> {}\n\nlet id: number;\n@Injectable({ providedIn: 'root' })\nexport class TodosStore extends EntityStore<TodosState, Todo> {\n    newTodoText: string;\n\n    static todosSelector(state: TodosState) {\n        return state.entities;\n    }\n\n    constructor(private todosApiService: TodosApiService) {\n        super(\n            {\n                entities: []\n            },\n            { idKey: 'id' }\n        );\n    }\n\n    private getWithCompleted(completed: Boolean) {\n        return this.entities.filter((todo: Todo) => todo.completed === completed);\n    }\n\n    getCompleted() {\n        return this.getWithCompleted(true);\n    }\n\n    allCompleted() {\n        return this.entities.length === this.getCompleted().length;\n    }\n\n    getRemaining() {\n        return this.getWithCompleted(false);\n    }\n\n    @Action()\n    fetchTodos() {\n        return this.todosApiService.fetchTodos().pipe(\n            tap((todos) => {\n                id = todos.length;\n                this.initialize(todos, { pageIndex: 1, pageCount: 2, pageSize: 20 });\n            })\n        );\n    }\n\n    @Action()\n    addTodo(title: string) {\n        return of(true).pipe(\n            tap(() => {\n                this.add({\n                    id: ++id,\n                    title: title,\n                    completed: false\n                });\n            })\n        );\n    }\n\n    @Action()\n    updateTodo(todo: Todo, title: string) {\n        if (title.length === 0) {\n            return this.remove(todo.id);\n        }\n        this.update(todo.id, {\n            editing: false,\n            title: title\n        });\n    }\n\n    @Action()\n    toggleCompletion(todo: Todo) {\n        this.update(todo.id, {\n            completed: !todo.completed\n        });\n    }\n\n    @Action()\n    removeCompleted() {\n        const todos = this.getCompleted();\n        this.remove(\n            todos.map((todo) => {\n                return todo.id;\n            })\n        );\n    }\n\n    @Action()\n    removeTodo(todo: Todo) {\n        this.remove(todo.id);\n    }\n\n    @Action()\n    setAllTo(completed: boolean) {\n        this.update(\n            this.entities.map((todo) => {\n                return todo.id;\n            }),\n            {\n                completed: completed\n            }\n        );\n    }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class TodosApiService {\n    fetchTodos(): Observable<Todo[]> {\n        const initialTodos: Todo[] = [\n            {\n                id: 1,\n                title: 'Todo1',\n                completed: false\n            }\n        ];\n        return of(initialTodos);\n    }\n}\n"},{"path":"tasks/tasks.component.html","content":"<header class=\"header\">\n  <h1>Tasks</h1>\n  <input class=\"new-task\" placeholder=\"Add new task?\" autofocus=\"\" [(ngModel)]=\"newTaskTitle\" (keyup.enter)=\"addTask()\" />\n</header>\n<div *ngIf=\"tasksStore.entitiesWithRefs$ | async as tasks\">\n  <div *ngFor=\"let task of tasks; trackBy: tasksStore.trackBy\">{{ task.title }} - {{ task.refs.assignee?.name }}</div>\n</div>\n"},{"path":"tasks/tasks.component.scss","content":""},{"path":"tasks/tasks.component.ts","content":"import { Component, OnInit } from '@angular/core';\nimport { TasksStore } from './tasks.store';\n\n@Component({\n    selector: 'thy-store-tasks-example',\n    templateUrl: './tasks.component.html',\n    styleUrls: ['./tasks.component.scss']\n})\nexport class ThyStoreTasksExampleComponent implements OnInit {\n    newTaskTitle!: string;\n\n    constructor(public tasksStore: TasksStore) {}\n\n    ngOnInit(): void {\n        this.tasksStore.fetchTasks();\n    }\n\n    addTask() {\n        this.tasksStore.addTask(this.newTaskTitle);\n        this.newTaskTitle = '';\n    }\n}\n"},{"path":"tasks/tasks.store.ts","content":"import { Injectable } from '@angular/core';\nimport { Action, EntityState, EntityStore, OnCombineRefs, ReferencesIdDictionary } from '@tethys/store';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport interface User {\n    _id: string;\n    name: string;\n}\n\nexport interface Task {\n    _id: string;\n    title: string;\n    assignee: string;\n    created_by: string;\n    refs?: {\n        assignee: User;\n        created_by: User;\n    };\n}\n\nexport interface TasksReferences {\n    users: User[];\n}\n\ninterface TasksState extends EntityState<Task, TasksReferences> {}\n\nlet taskIndex: number;\n@Injectable({ providedIn: 'root' })\nexport class TasksStore extends EntityStore<TasksState, Task, TasksReferences> implements OnCombineRefs<Task, TasksReferences> {\n    constructor() {\n        super({ entities: [], references: { users: [] } }, {});\n    }\n\n    onCombineRefs(entity: Task, referencesIdMap: ReferencesIdDictionary<TasksReferences>, references?: TasksReferences): void {\n        entity.refs.assignee = referencesIdMap.users[entity.assignee];\n        entity.refs.created_by = referencesIdMap.users[entity.created_by];\n    }\n\n    @Action()\n    fetchTasks() {\n        const data = {\n            tasks: [{ _id: 'task1', title: 'Task 1', assignee: 'user1', created_by: 'user1' }],\n            references: {\n                users: [\n                    { _id: 'user1', name: 'why520crazy' },\n                    { _id: 'user2', name: 'peter' }\n                ]\n            }\n        };\n        return of(data).pipe(\n            tap((data) => {\n                this.initializeWithReferences(data.tasks, data.references);\n            })\n        );\n    }\n\n    @Action()\n    addTask(title: string) {\n        this.addWithReferences(\n            {\n                _id: `task${++taskIndex}`,\n                title: title,\n                created_by: 'user3',\n                assignee: 'user3'\n            },\n            {\n                users: [\n                    {\n                        _id: 'user3',\n                        name: 'Terry'\n                    }\n                ]\n            }\n        );\n    }\n}\n"},{"path":"cancellation/cancellation.component.html","content":"<button class=\"dg-btn dg-btn-primary dg-btn-sm\" (click)=\"fetchItems()\">Fetch Items</button>\n<button class=\"dg-btn dg-btn-primary dg-btn-sm\" (click)=\"cancel()\">Cancel</button>\n\n<div *ngIf=\"loadingDone; else loading\">\n  <div *ngFor=\"let item of todos$ | async\">\n    {{ item.title }}\n  </div>\n</div>\n\n<ng-template #loading>\n  <div>Loading...</div>\n</ng-template>\n\n<div class=\"messages\">\n  <div *ngFor=\"let message of messages\">\n    {{ message }}\n  </div>\n</div>\n"},{"path":"cancellation/cancellation.component.scss","content":".dg-btn {\n    margin-bottom: 12px;\n    margin-right: 8px;\n}\n\n.messages {\n    margin-top: 8px;\n}\n"},{"path":"cancellation/cancellation.component.ts","content":"import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { TodosStore } from './items.store';\nimport { takeUntil, finalize, switchMap, catchError } from 'rxjs/operators';\nimport { MonoTypeOperatorFunction, of, Subject, Observable } from 'rxjs';\n\n@Component({\n    selector: 'thy-store-cancellation-example',\n    templateUrl: './cancellation.component.html',\n    styleUrls: ['./cancellation.component.scss'],\n    providers: [TodosStore]\n})\nexport class ThyStoreCancellationExampleComponent implements OnInit {\n    destroy$ = new Subject<void>();\n\n    loadingDone = false;\n\n    messages: string[] = [];\n\n    todos$ = this.todosStore.select((state) => {\n        return state.items;\n    });\n\n    constructor(public todosStore: TodosStore) {}\n\n    ngOnInit(): void {\n        this.fetchItems();\n    }\n\n    fetchItems() {\n        this.loadingDone = false;\n        this.todosStore\n            .fetchItems()\n            .pipe(\n                finalize(() => {\n                    this.loadingDone = true;\n                })\n            )\n            .subscribe({\n                next: (result) => {\n                    console.log(`next`, result);\n                    this.messages.push(`Items fetched ${new Date()}`);\n                },\n                error: (error: Error) => {\n                    console.log(error);\n                },\n                complete: () => {\n                    console.log('complete!');\n                }\n            });\n    }\n\n    cancel() {\n        this.todosStore.cancelUncompleted();\n    }\n}\n\nexport function loadingDone<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>) => {\n        return new Observable((observer) => {\n            const onNext = (value: T) => {\n                callback();\n                observer.next(value);\n            };\n            const onError = (error: Error) => {\n                callback();\n                observer.error(error);\n            };\n            const onComplete = () => observer.complete();\n            return source.subscribe(onNext, onError, onComplete);\n        });\n    };\n}\n"},{"path":"cancellation/items.store.ts","content":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Action, Store } from '@tethys/store';\nimport { of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\n\nexport interface Todo {\n    _id?: string;\n    title: string;\n    created_by?: string;\n}\n\ninterface TodosState {\n    items: Todo[];\n}\n\n@Injectable()\nexport class TodosStore extends Store<TodosState> {\n    constructor(private http: HttpClient) {\n        super({\n            items: []\n        });\n    }\n\n    @Action({ cancelUncompleted: 'self' })\n    fetchItems() {\n        return this.http.get<Todo[]>('https://62f70d4273b79d015352b5e5.mockapi.io/items').pipe(\n            tap((data) => {\n                this.setState({ items: data });\n            })\n        );\n    }\n\n    @Action()\n    hello() {\n        throw new Error('xx');\n    }\n}\n"},{"path":"examples.module.ts","content":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ThyStoreModule } from '@tethys/store';\nimport { CounterStore } from './counter/counter.store';\nimport { ThyStoreCounterExampleComponent } from './counter/counter.component';\nimport { ThyStoreTodosExampleComponent } from './todos/todos.component';\nimport { ThyStoreTasksExampleComponent } from './tasks/tasks.component';\nimport { ThyStoreCancellationExampleComponent } from './cancellation/cancellation.component';\nimport { NgModule } from '@angular/core';\n\nexport default {\n    imports: [CommonModule, FormsModule, ThyStoreModule.forRoot([CounterStore])]\n};\n\n@NgModule({\n    declarations: [ ThyStoreCounterExampleComponent, ThyStoreTodosExampleComponent, ThyStoreTasksExampleComponent, ThyStoreCancellationExampleComponent ],\n    entryComponents: [ ThyStoreCounterExampleComponent, ThyStoreTodosExampleComponent, ThyStoreTasksExampleComponent, ThyStoreCancellationExampleComponent ],\n    providers: [  ],\n    imports: [ CommonModule, FormsModule, ThyStoreModule.forRoot([CounterStore]) ],\n    exports: [ ThyStoreCounterExampleComponent, ThyStoreTodosExampleComponent, ThyStoreTasksExampleComponent, ThyStoreCancellationExampleComponent ]\n})\nexport class ThyStoreExamplesModule {}\n"}]